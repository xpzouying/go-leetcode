package decode_ways

import "strconv"

func numDecodings(s string) int {
	l := len(s)
	if l == 0 {
		return 0
	}

	if l == 1 {
		if s == "0" {
			return 0
		}
		return 1
	}

	// DP 保存到该下标（包括）的编码方法的总数
	DP := make([]int, l)
	// if s[0] == '0' {
	// 	DP[0] = 0
	// } else {
	// 	DP[0] = 1
	// }

	// 初始化前两位
	switch n := strToInt(s[:2]); n {
	case 0:
		DP[0] = 0
		DP[1] = 0
	case 10, 20:
		DP[0] = 1
		DP[1] = 1
	default:
		if 1 <= n && n <= 9 {
			DP[0] = 0
			DP[1] = 0
		} else if 11 <= n && n <= 26 {
			DP[0] = 1
			DP[1] = 2
		} else {
			DP[0] = 1
			DP[1] = 1
		}
	}

	for i := 2; i < l; i++ {

		// 如果最后一位是'0'，最后一位无效，数量也就是DP[i-1]
		if s[i] == '0' {
			DP[i] = DP[i-1]
			continue
		}

		// --- 如果最后一位不是0 ---

		substr := s[i-1 : i+1] // 包括下标i的子字符串
		n := strToInt(substr)

		if n <= 9 {
			DP[i] = DP[i-2]
		} else if n > 10 && n <= 26 {
			DP[i] = DP[i-1] + DP[i-2]
		} else {
			// 超出编码取值范围
			DP[i] = DP[i-1]
		}
	}

	return DP[len(DP)-1]
}

func strToInt(s string) int {
	i, _ := strconv.Atoi(s)
	return i
}

/**

### 解题思路

**线索：**

要求解码方式的总数，是一道动态规划的题目的线索。

状态转移：

DP记录解码方法的总数。

DP[i]为字符串到第i个字符串时的总数，

由于编码最多是变化成2为字符，所以可以假设转移方程为：

DP[i] =

分下列几种类型：

1. 当s[i] == '0'：则 DP[i] = DP[i-1]。因为0没用；
2. 当s[i] != '0'，需要判断2位字符是否为合法（大于1且小于26）
	2.1 如果s[i-1:i+1]合法，
		2.1.1: 如果子字符串为：01-09: 即s[i-1]=="0"，则DP[i] = DP[i-2]，DP[i-1]和DP[i-2]相同
		2.1.2：如果子字符串为：10-26：则DP[i] = DP[i-1] + DP[i-2]
	2.2 如果s[i-1:i+1]不合法，则：DP[i] = DP[i-1]

初始化：
取
	s[0:0] = 0，0个字符的时候，为0
	s[0:1] = 1，1个字符的时候，为1




### 测试1

s: 226

DP[:0] = DP[""] = 1
DP[:1] = DP["2"] = 1
DP[:2] = DP["22"] = DP[""+"22"] + DP["2" + "2"] = 1+1 = 2
DP[:3] = DP["22"+"6"]+DP["2" + "26"] = 2+1=3

DP[:3] = DP["226"]
	转移方程为：s[3] == "6",且"26"为合法，则：
	DP[:3] = DP[:1] + DP[:2] = 1+2 = 3


### 测试2

s: 20

DP[:0] = DP[""] = 1
DP[:1] = DP["2"] = 1
DP[:2] = DP["20"] = DP["2"] + DP["" + "20"] = 1 + 1 = 2

### 测试3

s: 206

DP[:0] = DP[""] = 1
DP[:1] = DP["2"] = 1
DP[:2] = DP["20"] = DP["" + "20"] + DP["2" + "0"] = DP["" + "20"] + DP["2"] ==> 1 + 1 = 2
DP[:3] = DP["206"] = DP["20" + "6"] + DP["2" + "06"] = 2 + 1 = 3

### 测试4

s: 02
DP[0] = DP["0"] = 1
DP[1] = DP["02"] = DP[""+"02"] + DP["0" + "2"] = 1
如果子字符串只是个位数，比如"02"，就只需要DP[i] = DP[i-2]




*/
